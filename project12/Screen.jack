// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean colour;
    static Array screen;
    static Array twoToThe;
    static Array mask;

    /** Initializes the Screen. */
    function void init() {
        var int a, i;

        let screen = 16384;
        let colour = true;

        let twoToThe = Array.new(16);
        let mask = Array.new(17);
        let mask[0] = 0;
        let a = 1;
        let i = 0;
        while (i < 16) {
            let twoToThe[i] = a;
            let mask[i + 1] = mask[i] + a;
            let a = a + a;
            let i = i + 1;
        }

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = screen;
        while (address < 24576) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            // Ensure true is represented as -1 (drawPixel implementation relies on this).
            let colour = true;
        }
        else {
            let colour = false;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mask;
        let address = screen + (32 * y) + (x / 16);
        let value = Memory.peek(address);
        let mask = twoToThe[x - ((x / 16) * 16)];
        if (colour) {
            do Memory.poke(address, value | mask);
        }
        else {
            do Memory.poke(address, value & (~mask));
        }
        return;
    }

    /** Draws horizontal line. */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int row, x1div16, x2div16, x1mod16, x2mod16, word1, word2;

        let row = 32 * y;
        let x1div16 = x1 / 16;
        let x2div16 = x2 / 16;
        let x1mod16 = x1 - (x1div16 * 16);
        let x2mod16 = x2 - (x2div16 * 16);
        let word1 = row + x1div16;
        let word2 = row + x2div16;

        if (word1 = word2) {
            if (colour) {
                let screen[word1] = screen[word1] | ((~mask[x1mod16]) & mask[x2mod16 + 1]);
            }
            else {
                let screen[word1] = screen[word1] & (~((~mask[x1mod16]) & mask[x2mod16 + 1]));
            }
        }
        else {
            if (colour) {
                let screen[word1] = screen[word1] | (~mask[x1mod16]);
                let screen[word2] = screen[word2] | mask[x2mod16 + 1];
            }
            else {
                let screen[word1] = screen[word1] & mask[x1mod16];
                let screen[word2] = screen[word2] & (~mask[x2mod16 + 1]);
            }
            let word1 = word1 + 1;
            while (word1 < word2) {
                let screen[word1] = colour;
                let word1 = word1 + 1;
            }
        }

        return;
    }

    /* Draws vertical line. */
    function void drawVerticalLine(int x, int y1, int y2) {
        var int row1, row2, xdiv16, xmod16, word1, word2;

        let row1 = 32 * y1;
        let row2 = 32 * y2;
        let xdiv16 = x / 16;
        let xmod16 = x - (xdiv16 * 16);
        let word1 = row1 + xdiv16;
        let word2 = row2 + xdiv16;

        if (colour) {
            while (word1 < word2) {
                let screen[word1] = screen[word1] | twoToThe[xmod16];
                let word1 = word1 + 32;
            }
        }
        else {
            while (word1 < word2) {
                let screen[word1] = screen[word1] & (~twoToThe[xmod16]);
                let word1 = word1 + 32;
            }
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff;
        var int x, y;

        // Horizontal line.
        if (y1 = y2) {
            if (x1 > x2) {
                do Screen.drawHorizontalLine(x2, x1, y1);
            }
            else {
                do Screen.drawHorizontalLine(x1, x2, y1);
            }
            return;
        }

        // Vertical Line
        if (x1 = x2) {
            if (y1 > y2) {
                do Screen.drawVerticalLine(x1, y2, y1);
            }
            else {
                do Screen.drawVerticalLine(x1, y1, y2);
            }
            return;
        }

        // Diagonal lines.
        if (x1 < x2) {
            let x = x1;
            let y = y1;
            let dx = x2 - x1;
            let dy = y2 - y1;
        }
        else {
            let x = x2;
            let y = y2;
            let dx = x1 - x2;
            let dy = y1 - y2;
        }
        if (dy < 0) {
            // Line from bottom left to top right.
            let dx = dx + 1;
            let dy = dy - 1;
            while ((a < dx) & (b > dy)) {
                do Screen.drawPixel(x + a, y + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff - dy;
                }
                else {
                    let b = b - 1;
                    let diff = diff - dx;
                }
            }
        }
        else {
            // Line from top left to bottom right.
            let dx = dx + 1;
            let dy = dy + 1;
            while (a < dx & b < dy) {
                do Screen.drawPixel(x + a, y + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int b, dy;
        let dy = y2 - y1;
        let b = -1;
        while (b < dy) {
            let b = b + 1;
            do Screen.drawHorizontalLine(x1, x2, y1 + b);
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        if (r > 181) {
            let r = 181;
        }
        let dy = (-r) - 1;
        while (dy < r) {
            let dy = dy + 1;
            do Screen.drawHorizontalLine(x - Math.sqrt((r * r) - (dy * dy)), x + Math.sqrt((r * r) - (dy * dy)), y + dy);
        }
        return;
    }
}
